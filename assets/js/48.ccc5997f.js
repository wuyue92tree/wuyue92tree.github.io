(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{486:function(e,t,n){"use strict";n.r(t);var i=n(12),l=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",[e._v("‰ªãÁªç")]),e._v(" "),n("p",[e._v("A configurable and versatile update server for all your Electron apps")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/atlassian/nucleus"}},[e._v("https://github.com/atlassian/nucleus")])]),e._v(" "),n("h1",[e._v("ÈÉ®ÁΩ≤")]),e._v(" "),n("h2",[e._v("ÁîüÊàêgpg")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://help.github.com/en/articles/generating-a-new-gpg-key"}},[e._v("https://help.github.com/en/articles/generating-a-new-gpg-key")])]),e._v(" "),n("p",[n("a",{attrs:{href:"http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/"}},[e._v("http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/atlassian/nucleus/issues/37"}},[e._v("https://github.com/atlassian/nucleus/issues/37")])]),e._v(" "),n("p",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/07/gpg.html"}},[e._v("http://www.ruanyifeng.com/blog/2013/07/gpg.html")])]),e._v(" "),n("p",[e._v("Tips: ÁîüÊàêÁöÑgpgÁßÅÈí•ÂøÖÈ°ª‰∏çËÆæÁΩÆÂØÜÁ†ÅÔºåÂê¶ÂàôÊúçÂä°Â∞ÜÊó†Ê≥ïÊ≠£Â∏∏ÂêØÂä®")]),e._v(" "),n("h2",[e._v("ÈÖçÁΩÆÊñá‰ª∂")]),e._v(" "),n("pre",[n("code",[e._v("# config.js\n"),n("p",[e._v("const path = require('path');")]),e._v("\n"),n("p",[e._v("module.exports = {\n/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("The port to run Nucleus Server on, if the port is in use the server will not start\n*/\nport: 3030,")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("The fully qualified domain + path that Nucleus is being hosted at\n*/\nbaseURL: 'http://localhost:8888',")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("The data store to use when persisting plugins and versions.  Current possible values")]),e._v("\n"),n("li",[e._v('are "sequelize", ensure you also supply valid connection details for your')]),e._v("\n"),n("li",[e._v("chosen strategy below.")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("PR's welcome to add another data store.\n*/\ndbStrategy: 'sequelize',")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("Sequelize connection information, please note all options are required")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("database: The name of the database to connect to")]),e._v("\n"),n("li",[e._v("dialect: The type of SQL database this is, check sequelize docs for more info")]),e._v("\n"),n("li",[e._v("username: Username to use when connecting")]),e._v("\n"),n("li",[e._v("password; Password to use when connecting")]),e._v("\n"),n("li",[e._v("host: Hostname of database")]),e._v("\n"),n("li",[e._v("port: Port to use when connecting")]),e._v("\n"),n("li",[e._v("storage: Path to sqlite file, only used for sqlite dialect\n*/\nsequelize: {\ndialect: 'sqlite',\nstorage: path.resolve(__dirname, 'db.sqlite'),\n},")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("The file store to use when persisting update files and metadata.  Current possible")]),e._v("\n"),n("li",[e._v('values are "s3" and "local" ensure you also supply valid connection details if')]),e._v("\n"),n("li",[e._v("required for your chosen strategy below.")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("PR's welcome to add another file store.\n*/\nfileStrategy: 'local',")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("Local file configuration")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("root: Path on disk to the root of the static file store")]),e._v("\n"),n("li",[e._v("staticUrl: The HTTP url to use to access the static file store remotely\n*/\nlocal: {\nroot: path.resolve(__dirname, '.files'),\nstaticUrl: 'http://localhost:9999'\n},")]),e._v("\n")]),e._v("\n"),n("p",[e._v("/**")]),e._v("\n"),n("ul",[e._v("\n"),n("li",[e._v("There is actually no authentication config for s3, all config must be done through the standard AWS")]),e._v("\n"),n("li",[e._v("environment variables or through EC2 IAM roles.")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("See http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html")]),e._v("\n"),n("li"),e._v("\n"),n("li",[e._v("Bucket / Region / CloudFront config goes here though\n*/\ns3: {\n// init: {\n//   endpoint: '' // The alternate endpoint to reach the S3 instance at,\n//   s3ForcePathStyle: true // Always use path style URLs\n// }")]),e._v("\n")]),e._v("\n"),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("bucketName: &#039;&#039;, // The name for your S3 Bucket\n\ncloudfront: { // If you don&#039;t have CloudFront set up and just want to use the S3 bucket set this to &quot;null\n  distributionId: &#039;&#039;, // The CloudFront distribution ID, used for invalidating files\n  publicUrl: &#039;&#039;, // Fully qualified URL for the root of the CloudFront proxy for the S3 bucket\n}\n")])])]),n("p",[e._v("},")]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v('The authentication strategy to use when logging users in.  Current possible values are "local",')]),e._v(" "),n("li",[e._v('"openid" and "github".  Make you also supply the required authentication details\n*/\nauthStrategy: \'local\',')])]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("Local authentication details")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("The "),n("code",[e._v("adminIdentifiers")]),e._v(" array should be a list of usernames")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("DISCLAIMER: This strategy should ONLY be used for local development and NEVER")]),e._v(" "),n("li",[e._v("used in production.  Unicorns cry every time this setting is used in production.")]),e._v(" "),n("li",[e._v("Don't make the unicorns cry.")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("displayName: The user friendly name of this user")]),e._v(" "),n("li",[e._v("username: A unique identifier to use when this user signs in, please note uniqueness is")]),e._v(" "),n("li",[n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("      not enforced\n")])])])]),e._v(" "),n("li",[e._v("password: Well, uhhh, their password")]),e._v(" "),n("li",[e._v("photo: A URL for their profile, entirely optional, just makes things look nicer üòâ\n*/\nlocalAuth: [{\ndisplayName: 'Charlie',\nusername: 'charlie',\npassword: 'charlie',\nphoto: 'https://pbs.twimg.com/profile_images/1219364727/charlie-support_400x400.png'\n}],")])]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("OpenID authentication details")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("The "),n("code",[e._v("adminIdentifiers")]),e._v(" array should be a list of email")]),e._v(" "),n("li",[e._v("addresses for users to consider admins")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("realm: The domain that the server is hosted on")]),e._v(" "),n("li",[e._v("stateless: Stateless mode for openID")]),e._v(" "),n("li",[e._v("profile: Whether to fetch profile information, should normally be true")]),e._v(" "),n("li",[e._v("providerURL: Your openID provider URL")]),e._v(" "),n("li",[e._v("domain: Domain to restrict email addresses to\n*/\nopenid: {\nrealm: 'http://localhost:8888',\nstateless: true,\nprofile: true,\nproviderURL: 'https://auth.myservice.com/openid/v2/op',\ndomain: 'myservice.com'\n},")])]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("GitHub authentication details")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("The "),n("code",[e._v("adminIdentifiers")]),e._v(" array should be a list of GitHub usernames")]),e._v(" "),n("li",[e._v("to consider admins")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("clientID: GitHub API client ID")]),e._v(" "),n("li",[e._v("clientSecret: GitHub API clientSecret")]),e._v(" "),n("li",[e._v("realm: The domain the server is hosted on\n*/\ngithub: {\nclientID: '',\nclientSecret: ''\n},")])]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("See the documentation for your authentication strategy for what this array does\n*/\nadminIdentifiers: ['admin@yourdomain.com', 'charlie'],")])]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("Session options, in development just leave this as default.")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("IN PRODUCTION PLEASE USE REDIS!")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v('type: Can be either "redis" or null')]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("redis:")]),e._v(" "),n("li",[e._v("host: The host URL for the redis instance")]),e._v(" "),n("li",[e._v("port: The port for the redis instance\n*/\nsessionConfig: {\ntype: null,\nsecret: 'ThisIsNotSecret',")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("redis: {\n  host: &#039;&#039;,\n  port: &#039;&#039;\n}\n")])])]),n("p",[e._v("},")]),e._v(" "),n("p",[e._v("organization: 'My Company Here',")]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("GPG key to use when signing APT and YUM releases")]),e._v(" "),n("li"),e._v(" "),n("li",[e._v("Requires to be unlocked (no password) and have both the private and")]),e._v(" "),n("li",[e._v("public key.\n*/\ngpgSigningKey: `\n-----BEGIN PGP PUBLIC KEY BLOCK-----")])]),e._v(" "),n("p",[e._v("KEY BODY\n-----END PGP PUBLIC KEY BLOCK-----\n-----BEGIN PGP PRIVATE KEY BLOCK-----")]),e._v(" "),n("p",[e._v("KEY BODY\n-----END PGP PRIVATE KEY BLOCK-----\n`,")]),e._v(" "),n("p",[e._v("/**")]),e._v(" "),n("ul",[n("li",[e._v("The default percentage rollout for new releases.  The first release for")]),e._v(" "),n("li",[e._v("any channel will always be 100% but all future releases will have a")]),e._v(" "),n("li",[e._v("default rollout value of this setting\n*/\ndefaultRollout: 0\n};")])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);
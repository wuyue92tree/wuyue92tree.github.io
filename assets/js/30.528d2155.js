(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{446:function(e,n,t){"use strict";t.r(n);var o=t(12),r=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",[e._v("介绍")]),e._v(" "),t("p",[e._v("什么是albert？")]),e._v(" "),t("p",[e._v("一款类似于Mac系统Spotlight搜索的软件")]),e._v(" "),t("p",[e._v("官方网站："),t("a",{attrs:{href:"https://albertlauncher.github.io/"}},[e._v("https://albertlauncher.github.io/")])]),e._v(" "),t("p",[e._v("代码仓库："),t("a",{attrs:{href:"https://github.com/albertlauncher/albert"}},[e._v("https://github.com/albertlauncher/albert")])]),e._v(" "),t("h1",[e._v("安装")]),e._v(" "),t("pre",[t("code",{staticClass:"language-shell"},[e._v("wget -nv https://download.opensuse.org/repositories/home:manuelschneid3r/xUbuntu_16.04/Release.key -O Release.key\nsudo apt-key add - < Release.key\nsudo apt-get update\nsudo sh -c \"echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_16.04/ /' > /etc/apt/sources.list.d/albert.list\"\nsudo apt-get update\nsudo apt-get install albert")])]),e._v(" "),t("h1",[e._v("修改配置文件")]),e._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[e._v("[General]\nfrontendId=org.albert.frontend.boxmodel.widgets\nhotkey=Alt+Space\nshowTray=true\nstandsalone_note_shown=true\nterminal=gnome-terminal -x\n"),t("p",[e._v("[org.albert.extension.applications]\nenabled=true\nfuzzy=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.calculator]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.chromebookmarks]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.externalextensions]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.files]\nenabled=true\nfilters=inode/directory, application/"),t("em",[e._v(", text/")]),e._v(", image/*\nfuzzy=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.firefoxbookmarks]\nenabled=true\nprofile=Profile0")]),e._v("\n"),t("p",[e._v("[org.albert.extension.hashgenerator]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.kvstore]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.mpris]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.ssh]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.system]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.terminal]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.extension.websearch]\nenabled=true")]),e._v("\n"),t("p",[e._v("[org.albert.frontend.boxmodel.qml]\nalwaysOnTop=true\nhideOnClose=false\nhideOnFocusLoss=true\nshowCentered=true\nstylePath=/usr/share/albert/org.albert.frontend.boxmodel.qml/styles/BoxModel/MainComponent.qml\nwindowPosition=@Point(609 297)")]),e._v("\n"),t("p",[e._v("[org.albert.frontend.boxmodel.widgets]\nalwaysOnTop=true\nclearOnHide=false\ndisplayIcons=true\ndisplayScrollbar=true\ndisplayShadow=true\nhideOnClose=false\nhideOnFocusLoss=true\nitemCount=10\nshowCentered=true\ntheme=Yosemite")])])]),e._v(" "),t("h1",[e._v("添加switchapp插件")]),e._v(" "),t("p",[e._v("保存目录：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-bash"},[e._v("~/.local/share/albert/org.albert.extension.externalextensions/extensions/")])]),e._v(" "),t("p",[e._v("文件内容：")]),e._v(" "),t("pre",[t("code",{staticClass:"language-python"},[e._v("#!/usr/bin/env python"),t("p"),e._v("\n"),t("p",[e._v("import subprocess\nimport sys\nimport re\nimport os\nimport json\nfrom ConfigParser import SafeConfigParser")]),e._v("\n"),t("p",[e._v('"""\nA window switcher that opens existing applications\nrequires: wmctrl\n"""')]),e._v("\n"),t("p",[e._v('albert_op = os.environ.get(\'ALBERT_OP\')\nAPP_DIR = "/usr/share/applications/"\nLOCAL_APP_DIR = os.path.expanduser("~/.local/share/applications/")')]),e._v("\n"),t("p",[e._v('if albert_op == \'METADATA\':\nmetadata = """{\n"iid": "org.albert.extension.external/v3.0",\n"name": "WindowSwitcher",\n"version": "1.0",\n"author": "Klesh Wong",\n"dependencies": [],\n"trigger": "`"\n}"""\nprint(metadata)\nsys.exit(0)')]),e._v("\n"),t("p",[e._v("elif albert_op == 'QUERY':\ndef parse_config_file(program):\nconfig_file = \"\"\nparts = program.split('.')")]),e._v("\n"),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("    for part in parts:\n        if os.path.exists(APP_DIR + part + &quot;.desktop&quot;):\n            config_file = APP_DIR + part + &quot;.desktop&quot;\n            break\n\n        if os.path.exists(LOCAL_APP_DIR + part + &quot;.desktop&quot;):\n            config_file = LOCAL_APP_DIR + part + &quot;.desktop&quot;\n            break\n\n        part = part.lower()\n        if os.path.exists(APP_DIR + part + &quot;.desktop&quot;):\n            config_file = APP_DIR + part + &quot;.desktop&quot;\n            break\n\n        if os.path.exists(LOCAL_APP_DIR + part + &quot;.desktop&quot;):\n            config_file = LOCAL_APP_DIR + part + &quot;.desktop&quot;\n            break\n\n    if config_file == &quot;&quot;:\n        return [&quot;&quot;, &quot;&quot;]\n    else:\n        parser = SafeConfigParser()\n        parser.read(config_file)\n        return [parser.get(&quot;Desktop Entry&quot;, &quot;Name&quot;),\n                parser.get(&quot;Desktop Entry&quot;, &quot;Icon&quot;)]\n\nalbert_query = os.environ.get(&#039;ALBERT_QUERY&#039;)\nif albert_query:\n    albert_query = albert_query[1:]\n\nprocess = subprocess.Popen([&#039;wmctrl&#039;, &#039;-lpx&#039;], stdout=subprocess.PIPE)\noutput, error = process.communicate()\nif error:\n    print error\n    sys.exit(1)\nitems = []\npatt = re.compile(r&#039;^(\\w+)\\s+(\\d+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(.+)$&#039;)\nfor line in output.split(&#039;\\n&#039;):\n    match = patt.match(line)\n    if not match:\n        continue\n\n    name, icon = parse_config_file(match.group(4))\n\n    window_name = match.group(6)\n\n    search_str = (name + &quot; &quot; + window_name).lower()\n\n    if not name:\n        name = window_name\n\n    description = window_name\n\n    if albert_query and albert_query not in search_str:\n        continue\n\n    item = {\n        &#039;id&#039;: match.group(1),\n        &#039;name&#039;: name,\n        &#039;icon&#039;: icon,\n        &#039;description&#039;: description,\n        &#039;completion&#039;: &#039;switched&#039;,\n        &#039;actions&#039;: [{\n            &#039;name&#039;: &#039;Activiate&#039;,\n            &#039;command&#039;: &#039;python&#039;,\n            &#039;arguments&#039;: [\n                __file__,\n                str(match.group(1))\n            ]\n        }]\n    }\n\n    items.append(item)\n\nresp = {\n    &#039;items&#039;: items\n}\ntext = json.dumps(resp)\nprint(text)\n")])])]),t("p",[e._v("if len(sys.argv) > 1:\nwindow_id = sys.argv[1]\nsubprocess.Popen(['wmctrl', '-ia', window_id])")])])]),t("p")])}),[],!1,null,null,null);n.default=r.exports}}]);